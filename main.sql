CREATE OR REPLACE PACKAGE PKG_ALUNO IS
   
    PROCEDURE EXCLUIR_ALUNO(P_ID_ALUNO IN NUMBER);

   
    CURSOR LISTAR_ALUNOS_MAIORES_18 IS
        SELECT NOME, DATA_NASCIMENTO
        FROM ALUNO
        WHERE TRUNC(MONTHS_BETWEEN(SYSDATE, DATA_NASCIMENTO) / 12) > 18;

    
    CURSOR LISTAR_ALUNOS_POR_CURSO(P_ID_CURSO IN NUMBER) IS
        SELECT A.NOME
        FROM ALUNO A
        JOIN MATRICULA M ON A.ID_ALUNO = M.ID_ALUNO
        WHERE M.ID_CURSO = P_ID_CURSO;
END PKG_ALUNO;
/

CREATE OR REPLACE PACKAGE BODY PKG_ALUNO IS
   
    PROCEDURE EXCLUIR_ALUNO(P_ID_ALUNO IN NUMBER) IS
    BEGIN
        
        DELETE FROM MATRICULA WHERE ID_ALUNO = P_ID_ALUNO;

       
        DELETE FROM ALUNO WHERE ID_ALUNO = P_ID_ALUNO;

     
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20001, 'Erro ao excluir aluno: ' || SQLERRM);
    END EXCLUIR_ALUNO;

    
END PKG_ALUNO;
/

BEGIN
    PKG_ALUNO.EXCLUIR_ALUNO(123);
END;
/
DECLARE
    CURSOR_ALUNOS SYS_REFCURSOR;
    V_NOME ALUNO.NOME%TYPE;
    V_DATA_NASCIMENTO ALUNO.DATA_NASCIMENTO%TYPE;
BEGIN
    OPEN PKG_ALUNO.LISTAR_ALUNOS_MAIORES_18;
    LOOP
        FETCH PKG_ALUNO.LISTAR_ALUNOS_MAIORES_18 INTO V_NOME, V_DATA_NASCIMENTO;
        EXIT WHEN PKG_ALUNO.LISTAR_ALUNOS_MAIORES_18%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Nome: ' || V_NOME || ', Data de Nascimento: ' || TO_CHAR(V_DATA_NASCIMENTO, 'DD/MM/YYYY'));
    END LOOP;
    CLOSE PKG_ALUNO.LISTAR_ALUNOS_MAIORES_18;
END;
DECLARE
    V_NOME ALUNO.NOME%TYPE;
BEGIN
    FOR R_ALUNO IN PKG_ALUNO.LISTAR_ALUNOS_POR_CURSO(101) LOOP
        DBMS_OUTPUT.PUT_LINE('Nome: ' || R_ALUNO.NOME);
    END LOOP;
END;
/


    
    
    
    
    
    
    
    CREATE OR REPLACE PACKAGE PKG_PROFESSOR IS
    
    CURSOR LISTAR_TURMAS_POR_PROFESSOR IS
        SELECT P.NOME AS PROFESSOR, COUNT(T.ID_TURMA) AS TOTAL_TURMAS
        FROM PROFESSOR P
        JOIN TURMA T ON P.ID_PROFESSOR = T.ID_PROFESSOR
        GROUP BY P.NOME
        HAVING COUNT(T.ID_TURMA) > 1;

    FUNCTION TOTAL_TURMAS(P_ID_PROFESSOR IN NUMBER) RETURN NUMBER;

  
    FUNCTION PROFESSOR_DISCIPLINA(P_ID_DISCIPLINA IN NUMBER) RETURN VARCHAR2;
END PKG_PROFESSOR;
/
CREATE OR REPLACE PACKAGE BODY PKG_PROFESSOR IS
   
    FUNCTION TOTAL_TURMAS(P_ID_PROFESSOR IN NUMBER) RETURN NUMBER IS
        V_TOTAL_TURMAS NUMBER;
    BEGIN
        SELECT COUNT(ID_TURMA)
        INTO V_TOTAL_TURMAS
        FROM TURMA
        WHERE ID_PROFESSOR = P_ID_PROFESSOR;

        RETURN V_TOTAL_TURMAS;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 0;
    END TOTAL_TURMAS;

    
    FUNCTION PROFESSOR_DISCIPLINA(P_ID_DISCIPLINA IN NUMBER) RETURN VARCHAR2 IS
        V_PROFESSOR_NOME VARCHAR2(100);
    BEGIN
        SELECT P.NOME
        INTO V_PROFESSOR_NOME
        FROM PROFESSOR P
        JOIN DISCIPLINA D ON P.ID_PROFESSOR = D.ID_PROFESSOR
        WHERE D.ID_DISCIPLINA = P_ID_DISCIPLINA;

        RETURN V_PROFESSOR_NOME;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'Nenhum professor encontrado para esta disciplina';
    END PROFESSOR_DISCIPLINA;

    
END PKG_PROFESSOR;
/

DECLARE
    V_NOME PROFESSOR.NOME%TYPE;
    V_TOTAL_TURMAS NUMBER;
BEGIN
    OPEN PKG_PROFESSOR.LISTAR_TURMAS_POR_PROFESSOR;
    LOOP
        FETCH PKG_PROFESSOR.LISTAR_TURMAS_POR_PROFESSOR INTO V_NOME, V_TOTAL_TURMAS;
        EXIT WHEN PKG_PROFESSOR.LISTAR_TURMAS_POR_PROFESSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Professor: ' || V_NOME || ' - Total de Turmas: ' || V_TOTAL_TURMAS);
    END LOOP;
    CLOSE PKG_PROFESSOR.LISTAR_TURMAS_POR_PROFESSOR;
END;
/
DECLARE
    V_TOTAL_TURMAS NUMBER;
BEGIN
    V_TOTAL_TURMAS := PKG_PROFESSOR.TOTAL_TURMAS(101); 
    DBMS_OUTPUT.PUT_LINE('Total de turmas do professor: ' || V_TOTAL_TURMAS);
END;
/
DECLARE
    V_NOME_PROFESSOR VARCHAR2(100);
BEGIN
    V_NOME_PROFESSOR := PKG_PROFESSOR.PROFESSOR_DISCIPLINA(202); 
    DBMS_OUTPUT.PUT_LINE('Professor da disciplina: ' || V_NOME_PROFESSOR);
END;
/







CREATE OR REPLACE PACKAGE PKG_DISCIPLINA IS
    
    PROCEDURE CADASTRAR_DISCIPLINA(
        P_NOME IN VARCHAR2,
        P_DESCRICAO IN VARCHAR2,
        P_CARGA_HORARIA IN NUMBER
    );

    
    CURSOR TOTAL_ALUNOS_POR_DISCIPLINA IS
        SELECT D.NOME AS DISCIPLINA, COUNT(M.ID_ALUNO) AS TOTAL_ALUNOS
        FROM DISCIPLINA D
        JOIN MATRICULA M ON D.ID_DISCIPLINA = M.ID_DISCIPLINA
        GROUP BY D.NOME
        HAVING COUNT(M.ID_ALUNO) > 10;

    
    CURSOR MEDIA_IDADE_DISCIPLINA(P_ID_DISCIPLINA IN NUMBER) IS
        SELECT AVG(TRUNC(MONTHS_BETWEEN(SYSDATE, A.DATA_NASCIMENTO) / 12)) AS MEDIA_IDADE
        FROM ALUNO A
        JOIN MATRICULA M ON A.ID_ALUNO = M.ID_ALUNO
        WHERE M.ID_DISCIPLINA = P_ID_DISCIPLINA;

    
    PROCEDURE LISTAR_ALUNOS_DISCIPLINA(P_ID_DISCIPLINA IN NUMBER);
END PKG_DISCIPLINA;
/

CREATE OR REPLACE PACKAGE BODY PKG_DISCIPLINA IS
   
    PROCEDURE CADASTRAR_DISCIPLINA(
        P_NOME IN VARCHAR2,
        P_DESCRICAO IN VARCHAR2,
        P_CARGA_HORARIA IN NUMBER
    ) IS
    BEGIN
        INSERT INTO DISCIPLINA (NOME, DESCRICAO, CARGA_HORARIA)
        VALUES (P_NOME, P_DESCRICAO, P_CARGA_HORARIA);

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20001, 'Erro ao cadastrar a disciplina: ' || SQLERRM);
    END CADASTRAR_DISCIPLINA;

    
    PROCEDURE LISTAR_ALUNOS_DISCIPLINA(P_ID_DISCIPLINA IN NUMBER) IS
        CURSOR C_ALUNOS IS
            SELECT A.NOME
            FROM ALUNO A
            JOIN MATRICULA M ON A.ID_ALUNO = M.ID_ALUNO
            WHERE M.ID_DISCIPLINA = P_ID_DISCIPLINA;

        V_NOME ALUNO.NOME%TYPE;
    BEGIN
        OPEN C_ALUNOS;
        LOOP
            FETCH C_ALUNOS INTO V_NOME;
            EXIT WHEN C_ALUNOS%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Aluno: ' || V_NOME);
        END LOOP;
        CLOSE C_ALUNOS;
    END LISTAR_ALUNOS_DISCIPLINA;

   
END PKG_DISCIPLINA;
/

BEGIN
    PKG_DISCIPLINA.CADASTRAR_DISCIPLINA(
        P_NOME => 'Matemática',
        P_DESCRICAO => 'Introdução à matemática básica',
        P_CARGA_HORARIA => 60
    );
END;
/
    
DECLARE
    V_DISCIPLINA DISCIPLINA.NOME%TYPE;
    V_TOTAL_ALUNOS NUMBER;
BEGIN
    OPEN PKG_DISCIPLINA.TOTAL_ALUNOS_POR_DISCIPLINA;
    LOOP
        FETCH PKG_DISCIPLINA.TOTAL_ALUNOS_POR_DISCIPLINA INTO V_DISCIPLINA, V_TOTAL_ALUNOS;
        EXIT WHEN PKG_DISCIPLINA.TOTAL_ALUNOS_POR_DISCIPLINA%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Disciplina: ' || V_DISCIPLINA || ' - Total de Alunos: ' || V_TOTAL_ALUNOS);
    END LOOP;
    CLOSE PKG_DISCIPLINA.TOTAL_ALUNOS_POR_DISCIPLINA;
END;
/

DECLARE
    V_MEDIA_IDADE NUMBER;
BEGIN
    OPEN PKG_DISCIPLINA.MEDIA_IDADE_DISCIPLINA(101); 
    FETCH PKG_DISCIPLINA.MEDIA_IDADE_DISCIPLINA INTO V_MEDIA_IDADE;
    DBMS_OUTPUT.PUT_LINE('Média de Idade: ' || V_MEDIA_IDADE);
    CLOSE PKG_DISCIPLINA.MEDIA_IDADE_DISCIPLINA;
END;
/

BEGIN
    PKG_DISCIPLINA.LISTAR_ALUNOS_DISCIPLINA(101); 
END;
/